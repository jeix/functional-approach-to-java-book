A Functional Approach to Java: Augmenting Object-Oriented Java Code with Functional Principles (2023)

I. Functional Basics

1. An Introduction to Functional Programming

1.1 What Makes a Language Functional?
1.2 Functional Programming Concepts
	= Pure Functions and Referential Transparency
	= Immutability
	= Recursion
	= First-Class and Higher-Order Functions
	= Functional Composition
	= Currying
	= Partial Function Application
	= Lazy Evaluation
1.3 Advantages of Functional Programming
1.4 Disadvantages of Functional Programming
1.5 Takeaways

2. Functional Java

2.1 What Are Java Lambdas?
	= Lambda Syntax
	= Functional Interfaces
	= Lambdas and Outside Variables
	= What about Anonymous Classes?
2.2 Lambdas in Action
	= Creating Lambdas
	= Calling Lambdas
	= Method References
2.3 Functional Programming Concepts in Java
	= Pure Functions and Referential Transparency
	= Immutability
	= First-Class Citizenship
	= Functional Composition
	= Lazy Evaluation
2.4 Takeaways

3. Functional Interfaces of the JDK

3.1 The Big Four Functional Interface Categories
	= Functions
	= Consumers
	= Suppliers
	= Predicates
3.2 Why So Many Functional Interface Variants?
	= Function Arity
	= Primitive Types
	= Bridging Functional Interfaces
3.3 Functional Composition
3.4 Extending Functional Support
	= Adding Default Methods
	= Implementing Functional Interfaces Explicitly
	= Creating Static Helpers
3.5 Takeaways

II. A Functional Approach

4. Immutability

4.1 Mutability and Data Structures in OOP
4.2 Immutability (Not Only) in FP
4.3 The State of Java Immutability
	= java.lang.String
	= Immutable Collections
	= Primitives and Primitive Wrappers
	= Immutable Math
	= Java Time API (JSR-310)
	= Enums
	= The final Keyword
	= Records
4.4 How to Achieve Immutability
4.5 Common Practices
4.6 Takeaways

5. Working with Records

5.1 Data Aggregation Types
	= Tuples
	= A Simple POJO
	= From POJO to Immutability
	= From POJO to Record
5.2 Records to the Rescue
	= Behind the Scenes
	= Record Features
	= Missing Features
5.3 Use Cases and Common Practices
	= Record Validation and Data Scrubbing
	= Increasing Immutability
	= Creating Modified Copies
	= Records as Local Nominal Tuples
	= Better Optional Data Handling
	= Serializing Evolving Records
	= Record Pattern Matching
	= Sealed Types as Components
5.4 Final Thoughts on Records
5.5 Takeaways

6. Data Processing with Streams

6.1 Data Processing with Iteration
	= External Iteration
	= Internal Iteration
6.2 Streams as Functional Data Pipelines
	= Stream Features
	= Spliterator, the Backbone of Streams
6.3 Building Stream Pipelines
	= Creating a Stream
	= Doing the Work
	= Terminating the Stream
	= The Cost of Operations
	= Modifying Stream Behavior
6.4 To Use a Stream, or Not?
6.5 Takeaways

7. Working with Streams

7.1 Primitive Streams
7.2 Iterative Streams
7.3 Infinite Streams
	= Random Numbers
	= Memory Isn’t Infinite
7.4 From Arrays to Streams and Back
	= Object-Type Arrays
	= Primitive Arrays
7.5 Low-Level Stream Creation
7.6 Working with File I/O
	= Reading Directory Contents
	= Depth-First Directory Traversal
	= Searching the Filesystem
	= Reading Files Line-By-Line
	= Caveats of File I/O Streams
7.7 Dealing with Date and Time
	= Querying Temporal Types
	= LocalDate-Range Streams
7.8 Measuring Stream Performance with JMH
7.9 More about Collectors
	= Downstream Collectors
	= Creating Your Own Collector
7.10 Customizing Intermediate Operations (Java 22+)
	= Custom Distinct Operation without Gatherer
	= Creating a Custom Distinct Gatherer
7.11 Final Thoughts on (Sequential) Streams
7.12 Takeaways

8. Parallel Data Processing with Streams

8.1 Concurrency versus Parallelism
8.2 Streams as Parallel Functional Pipelines
8.3 Parallel Streams in Action
8.4 When to Use and When to Avoid Parallel Streams
	= Choosing the Right Data Source
	= Number of Elements
	= Stream Operations
	= Stream Overhead and Available Resources
	= Example: War and Peace (revisited)
	= Example: Random Numbers
8.5 Parallel Streams Checklist
8.6 Takeaways

9. Handling null with Optionals

9.1 The Problem with null References
9.2 How to Handle null in Java (Before Optionals)
	= Best Practices for Handling null
	= Tool-Assisted null Checks
	= Specialized Types Like Optional
9.3 Optionals to the Rescue
	= What’s an Optional?
	= Building Optional Pipelines
9.4 Optionals and Streams
	= Optionals as Stream Elements
	= Terminal Stream Operations
9.5 Optional Primitives
9.6 Caveats
	= Optionals Are Ordinary Types
	= Identity-Sensitive Methods
	= Performance Overhead
	= Special Considerations for Collections
	= Optionals and Serialization
9.7 Final Thoughts on null References
9.8 Takeaways

10. Functional Exception Handling

10.1 Java Exception Handling in a Nutshell
10.2 The try-catch block
	= The Different Types of Exceptions and Errors
10.3 Checked Exceptions in Lambdas
	= Safe Method Extraction
	= Un-Checking Exceptions
	= Sneaky Throws
10.4 A Functional Approach to Exceptions
	= Not Throwing Exceptions
	= Errors as Values
	= The Try/Success/Failure Pattern
10.5 Final Thoughts on Functional Exception Handling
10.6 Takeaways

11. Lazy Evaluation

11.1 Laziness Versus Strictness
11.2 How Strict Is Java?
	= Short-Circuit Evaluation
	= Control Structures
	= Lazy Types in the JDK
11.3 Lambdas and Higher-Order Functions
	= An Eager Approach
	= A Lazier Approach
	= A Functional Approach
11.4 Delayed Executions with Thunks
	= Creating a Simple Thunk
	= A Thread-Safe Thunk
11.5 Final Thoughts on Laziness
11.6 Takeaways

12. Recursion

12.1 What Is Recursion?
	= Head Versus Tail Recursion
	= Recursion and the Call Stack
12.2 A More Complex Example
	= Iterative Tree Traversal
	= Recursive Tree Traversal
12.3 Recursion-Like Streams
12.4 Final Thoughts on Recursion
12.5 Takeaways

13. Asynchronous Tasks

13.1 Synchronous versus Asynchronous
13.2 Java Futures
13.3 Designing Asynchronous Pipelines with CompletableFutures
	= Promising a Value
	= Creating a CompletableFuture
	= Compositing and Combining Tasks
	= Exception Handling
	= Terminal Operations
	= Creating a CompletableFuture Helper
13.4 Manual Creation and Completion
	= Manual Creation
	= Manual Completion
	= Use Cases for Manually Created and Completed Instances
13.5 About Thread Pools and Timeouts
13.6 Final Thoughts on Asynchronous Tasks
13.7 Takeaways

14. Functional Design Patterns

14.1 What Are Design Patterns?
14.2 (Functional) Design Patterns
	= Factory Pattern
	= Decorator Pattern
	= Strategy Pattern
	= Builder Pattern
14.3 Final Thoughts on Functional Design Patterns
14.4 Takeaways

15. A Functional Approach to Java

15.1 OOP Versus FP Principles
15.2 A Functional Mindset
	= Functions Are First-Class Citizens
	= Avoiding Side Effects
	= Functional Data Processing with Map/Filter/Reduce
	= Abstractions Guide Implementations
	= Building Functional Bridges
	= Parallelism and Concurrency Made Easy
	= Be Mindful of Potential Overhead
15.3 Functional Architecture in an Imperative World
	= From Objects to Values
	= Separation of Concerns
	= The Different Sizes of an FC/IS
	= Testing an FC/IS
15.4 Final Thoughts on a Functional Approach to Java
15.5 Takeaways

:wq